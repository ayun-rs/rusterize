services:
  workspace:
    container_name: rusterize-workspace
    build:
      context: ./.docker/context/workspace
      args:
        RUST_VERSION: ${RUST_VERSION}
        INSTALL_WATCH: true
        INSTALL_SEA_ORM: true
        INSTALL_NUSHELL: true
    tty: true
    stdin_open: true
    ports:
      - "8000:8000"
    volumes:
      - ./.docker/context/workspace/.config:/root/.config
      - ${WORKSPACE_PATH}:/home
    networks:
      - default

  postgres:
    image: postgres:latest
    container_name: rusterize-postgres
    restart: always
    shm_size: 128mb
    environment:
      PGUSER: postgres
      POSTGRES_PASSWORD: example
    ports:
      - "5432:5432"
    volumes:
      - ./.docker/data/postgres:/var/lib/postgresql/data
    networks:
      - default
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 1s
      timeout: 5s
      retries: 10

  mysql:
    image: mysql:latest
    container_name: rusterize-mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: password
    ports:
      - "3306:3306"
    volumes:
      - ./.docker/data/mysql:/var/lib/mysql/:rw
      - ./.docker/logs/mysql:/var/log/mysql/:rw
    networks:
      - default
    healthcheck:
      test: [ "CMD-SHELL", "mysqladmin ping -h 127.0.0.1 -u root -p$$MYSQL_ROOT_PASSWORD" ]
      interval: 1s
      timeout: 5s
      retries: 10

  redis:
    image: redis:latest
    container_name: rusterize-redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - ./.docker/data/redis:/data
    networks:
      - default

  # for demo use
  logify:
    image: logify:latest
    container_name: rusterize-logify
    build:
      context: ./.docker/context/logify

  vector:
    image: timberio/vector:latest-debian
    container_name: rusterize-vector
    tty: true
    stdin_open: true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./.docker/context/vector:/etc/vector

  dozzle:
    image: amir20/dozzle:latest
    container_name: rusterize-dozzle
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "8080:8080"
    environment:
      DOZZLE_NO_ANALYTICS: true

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: rusterize-jaegertracing
    ports:
      - "4317:4317"
#      - "5775:5775/udp"
#      - "5778:5778"
#      - "6831:6831/udp"
#      - "6832:6832/udp"
#      - "9411:9411"
#      - "14268:14268"
      - "16686:16686"

  prometheus:
    image: prom/prometheus:latest
    container_name: rusterize-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./.docker/data/prometheus:/prometheus

  grafana:
    image: grafana/grafana:latest
    container_name: rusterize-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - ./.docker/data/grafana:/var/lib/grafana

networks:
  default:
    driver: bridge
    ipam:
      driver: default
