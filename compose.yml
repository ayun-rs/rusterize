services:
  workspace:
    container_name: rusterize-workspace
    build:
      context: ./context/workspace
      args:
        RUST_VERSION: ${RUST_VERSION}
        INSTALL_WATCH: true
        INSTALL_SEA_ORM: true
    tty: true
    stdin_open: true
    ports:
      - "8000:8000"
    volumes:
      - ./context/workspace/.config:/root/.config
      - ${WORKSPACE_PATH}:/home
    networks:
      - default
      - postgres
      - mysql
      - redis

  postgres:
    image: postgres:latest
    container_name: rusterize-postgres
    restart: always
    shm_size: 128mb
    environment:
      PGUSER: postgres
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - ./.docker/data/postgres:/var/lib/postgresql/data
    networks:
      - postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 1s
      timeout: 5s
      retries: 10

  mysql:
    image: mysql:latest
    container_name: rusterize-mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${DATABASE_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - ./.docker/data/mysql:/var/lib/mysql/:rw
      - ./.docker/logs/mysql:/var/log/mysql/:rw
    networks:
      - mysql
    healthcheck:
      test: [ "CMD-SHELL", "mysqladmin ping -h 127.0.0.1 -u root -p$$MYSQL_ROOT_PASSWORD" ]
      interval: 1s
      timeout: 5s
      retries: 10

  redis:
    image: redis:latest
    container_name: rusterize-redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - ./.docker/data/redis:/data
    networks:
      - redis

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: rusterize-jaegertracing
    ports:
      - "4317:4317"
#      - "5775:5775/udp"
#      - "5778:5778"
#      - "6831:6831/udp"
#      - "6832:6832/udp"
#      - "9411:9411"
#      - "14268:14268"
      - "16686:16686"

  prometheus:
    image: prom/prometheus:latest
    container_name: rusterize-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./.docker/data/prometheus:/prometheus

  # for demo use
  logify:
    image: logify:latest
    container_name: rusterize-logify
    build:
      context: ./context/logify

  dozzle:
    image: amir20/dozzle:latest
    container_name: rusterize-dozzle
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "8080:8080"
    environment:
      DOZZLE_NO_ANALYTICS: true

  vector:
    image: timberio/vector:latest-debian
    container_name: rusterize-vector
    tty: true
    stdin_open: true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./context/vector:/etc/vector
    networks:
      - loki

  # https://grafana.com/docs/loki/latest/setup/install/docker/
  # https://github.com/grafana/loki/blob/main/production/docker-compose.yaml
  loki:
    image: grafana/loki:2.9.10
    container_name: rusterize-loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - loki

  promtail:
    image: grafana/promtail:2.9.10
    container_name: rusterize-promtail
    volumes:
      - ./.docker/logs/promtail:/var/log
    command: -config.file=/etc/promtail/config.yml
    networks:
      - loki

  grafana:
    image: grafana/grafana:latest
    container_name: rusterize-grafana
    user: "$UID:$GID"
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
        apiVersion: 1
        datasources:
        - name: Loki
          type: loki
          access: proxy 
          orgId: 1
          url: http://loki:3100
          basicAuth: false
          isDefault: true
          version: 1
          editable: false
        EOF
        /run.sh
    volumes:
      - ./.docker/data/grafana:/var/lib/grafana
    networks:
      - loki

networks:
  default:
    driver: bridge
    ipam:
      driver: default
  postgres:
  mysql:
  redis:
  loki: